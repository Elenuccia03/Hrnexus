@using System.Text.Json
@model DipendenteViewModel

<link rel="stylesheet" href="~/css/calendariolavoratori.css">
<div class="search-container">
    <form asp-action="CalendarioLavoratori" method="get">
        <input class="search" type="text" id="nome" name="nome" placeholder="Cerca dipendente" />
        <input type="hidden" id="annoCorrente" name="annoCorrente" />
        <input type="hidden" id="meseCorrente" name="meseCorrente" />
        <button type="submit" class="search-btn">Cerca</button>
    </form>
</div>

@if (Model != null)
{
    @if (Model.DipendenteTrovato)
    {
        int meseCorrente = Model.MeseProgrammazione;
        int annoCorrente = Model.AnnoProgrammazione;
        string meseTestuale = new DateTime(Model.AnnoProgrammazione, Model.MeseProgrammazione, 1).ToString("MMMM");
        int giorniNelMese = DateTime.DaysInMonth(annoCorrente, meseCorrente);
        int primoGiornoDellaSettimana = (int)new DateTime(annoCorrente, meseCorrente, 1).DayOfWeek;
        primoGiornoDellaSettimana = primoGiornoDellaSettimana == 0 ? 7 : primoGiornoDellaSettimana;
        <div class="calendar-container">

            <div class="nav-month">
                <form class="form-month" asp-action="CalendarioLavoratori" method="get">
                    <input type="hidden" name="nome" value="@Model.Nome" />
                    <input type="hidden" name="annoCorrente" value="@Model.AnnoProgrammazione" />
                    <input type="hidden" name="meseCorrente" value="@Model.MeseProgrammazione" />
                    <div class="month-selector">
                        <button type="submit" name="direzione" value="precedente">Precedente</button>
                        <span>@meseTestuale @annoCorrente</span>
                        <button type="submit" name="direzione" value="successivo">Successivo</button>
                    </div>
                </form>
            </div>

            <div class="calendar">
                <div class="day-of-week">Lunedì</div>
                <div class="day-of-week">Martedì</div>
                <div class="day-of-week">Mercoledì</div>
                <div class="day-of-week">Giovedì</div>
                <div class="day-of-week">Venerdì</div>
                <div class="day-of-week">Sabato</div>
                <div class="day-of-week">Domenica</div>
                @for (int i = 1; i < primoGiornoDellaSettimana; i++)
                {
                    <div class="day empty"></div>
                }
                @for (int i = 1; i <= giorniNelMese; i++)
                {
                    ProgrammazioneViewModel programmazione = Model.Programmazioni.FirstOrDefault(pm => pm.DataGiorno.Day == i);
                    var jsonModel = JsonSerializer.Serialize(programmazione);
                    string inizioTurnoJs = "";
                    string fineTurnoJs = "";
                    if (programmazione != null)
                    {
                        inizioTurnoJs = programmazione.InizioTurno.ToString("yyyy-MM-ddTHH:mm:ss");
                        fineTurnoJs = programmazione.FineTurno.ToString("yyyy-MM-ddTHH:mm:ss");
                    }
                    <div class="day" onclick='gestisciProgrammazione(@i, @Model.MeseProgrammazione, @Model.AnnoProgrammazione, @Html.Raw(jsonModel.Replace("'", "\'")), @Model.IdDipendente)'>
                        @i
                        @{
                            if (programmazione != null)
                            {
                                string cssClass = "";
                                bool isTimbraturaIrregolare = false; // Da rivedere la logica per questa variabile
                                bool isTimbraturaRegolare = true; // Da rivedere la logica per questa variabile
                                TimeSpan durataProgrammata = programmazione.InizioTurno - programmazione.FineTurno;

                                if (programmazione.TimbraturaInizio != null && programmazione.TimbraturaUscita != null)
                                {
                                    TimeSpan? durataEffettiva = programmazione.TimbraturaInizio - programmazione.TimbraturaUscita;
                                    TimeSpan? differenza = durataProgrammata - durataEffettiva;
                                    if (differenza.HasValue && differenza.Value.TotalMinutes > 15)
                                    {
                                        isTimbraturaIrregolare = true;
                                    }
                                    else
                                    {
                                        isTimbraturaRegolare = true;
                                    }
                                }
                                bool isFerie = programmazione.GiornoFerie;
                                bool isPermesso = programmazione.GiornoPermesso;
                                bool isMalattia = programmazione.GiornoMalattia;

                                if (isTimbraturaRegolare)
                                {
                                    cssClass = "regolare";
                                }
                                if (isTimbraturaIrregolare)
                                {
                                    cssClass = "irregolare";
                                }
                                if (isFerie)
                                {
                                    cssClass = "ferie";
                                }
                                if (isMalattia)
                                {
                                    cssClass = "malattia";
                                }
                                if (isPermesso)
                                {
                                    cssClass = "permesso";
                                }

                                <div class="@cssClass">
                                    <i class="fa-solid fa-square-check"></i>
                                </div>
                            }
                        }
                    </div>
                }
                @for (int i = (primoGiornoDellaSettimana + giorniNelMese - 1) % 7; i < 7 && i > 0; i++)
                {
                    <div class="day empty"></div>
                }
            </div>
        </div>
        /*modale che gestisce la programmazione del giorno cliccato*/
        <div id="programmazioneModal" class="modal">
            <div class="modal-content">
                <form id="programmazioneForm" asp-action="GestisciProgrammazione" method="post">
                    <h2 id="modalTitle">Gestisci Programmazione</h2>
                    <input type="hidden" id="giornoModale" name="giornoModale" />
                    <input type="hidden" id="meseModale" name="meseModale" />
                    <input type="hidden" id="annoModale" name="annoModale" />
                    <input type="hidden" id="idDipendente" name="idDipendente" />
                    <input type="hidden" id="idProgrammazione" name="idProgrammazione" />

                    <label for="inizioTurno">Inizio Turno:</label>
                    <input type="time" id="inizioTurnoModale" name="inizioTurnoModale" required />

                    <label for="fineTurno">Fine Turno:</label>
                    <input type="time" id="fineTurnoModale" name="fineTurnoModale" required />

                    <label for="giornoFerie">Giorno di Ferie:</label>
                    <input onchange="invertiValoreCheckbox(this)" type="checkbox" id="giornoFerieModale"
                        name="giornoFerieModale" />

                    <label for="giornoPermesso">Giorno di Permesso:</label>
                    <input onchange="invertiValoreCheckbox(this)" type="checkbox" id="giornoPermessoModale"
                        name="giornoPermessoModale" />

                    <label for="giornoMalattia">Giorno di Malattia:</label>
                    <input onchange="invertiValoreCheckbox(this)" type="checkbox" id="giornoMalattiaModale"
                        name="giornoMalattiaModale" />

                    <button type="submit" id="submitBtn">Salva</button>
                </form>
            </div>
        </div>
    }
    else
    {
        <div>
            dipendente non trovato
        </div>
    }
}
else
{
    <div>
        benvenuto nella sezione calendario
    </div>
}

<script>
    const dataCorrente = new Date();
    const annoCorrente = dataCorrente.getFullYear();
    const meseCorrente = dataCorrente.getMonth() + 1; // I mesi vanno da 0 (gennaio) a 11 (dicembre)

    // Impostare i valori degli input nascosti
    document.getElementById('annoCorrente').value = annoCorrente;
    document.getElementById('meseCorrente').value = meseCorrente;

    const modal = document.getElementById('programmazioneModal');
    const span = document.getElementsByClassName('close')[0];

    function gestisciProgrammazione(giorno, mese, anno, programmazione, idDipendente) {

        document.getElementById('giornoModale').value = giorno;
        document.getElementById('meseModale').value = mese;
        document.getElementById('annoModale').value = anno;
        document.getElementById('idDipendente').value = idDipendente;


        if (programmazione) {
            document.getElementById('idProgrammazione').value = programmazione.IdProgrammazione;
            console.log(programmazione.IdProgrammazione);
            var orarioInizioTurno = new Date(programmazione.InizioTurno);
            var oreInizio = orarioInizioTurno.getHours();
            var minutiInizio = orarioInizioTurno.getMinutes();
            if (minutiInizio < 10) {
                minutiInizio = "0" + minutiInizio;
            }
            var oraFormatoStringaInizio = ('0' + oreInizio).slice(-2) + ':' + ('0' + minutiInizio).slice(-2);

            var orarioFineTurno = new Date(programmazione.FineTurno);
            var oreFine = orarioFineTurno.getHours();
            var minutiFine = orarioFineTurno.getMinutes();
            if (minutiFine < 10) {
                minutiFine = "0" + minutiFine;
            }
            var oraFormatoStringaFine = ('0' + oreFine).slice(-2) + ':' + ('0' + minutiFine).slice(-2);

            document.getElementById('inizioTurnoModale').value = oraFormatoStringaInizio;
            document.getElementById('fineTurnoModale').value = oraFormatoStringaFine;
            document.getElementById('giornoFerieModale').checked = programmazione.GiornoFerie;
            document.getElementById('giornoPermessoModale').checked = programmazione.GiornoPermesso;
            document.getElementById('giornoMalattiaModale').checked = programmazione.GiornoMalattia;
            document.getElementById('modalTitle').innerText = 'Modifica Programmazione';
        }
        else {
            document.getElementById('inizioTurnoModale').value = '';
            document.getElementById('fineTurnoModale').value = '';
            document.getElementById('giornoFerieModale').checked = false;
            document.getElementById('giornoPermessoModale').checked = false;
            document.getElementById('giornoMalattiaModale').checked = false;
            document.getElementById('giornoFerieModale').value = false;
            document.getElementById('giornoPermessoModale').value = false;
            document.getElementById('giornoMalattiaModale').value = false;
            document.getElementById('modalTitle').innerText = 'Crea Programmazione';
        }
        modal.style.display = 'block';
    }


    // Quando l'utente clicca fuori dalla modal, chiudi la modal
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    }
    function invertiValoreCheckbox(checkbox) {
        checkbox.value = checkbox.checked;
        console.log('nuovovalore', checkbox.value)
    }
</script>
